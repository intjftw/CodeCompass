// <auto-generated />
using System;
using CSharpParser.model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CSharpParser.Migrations
{
    [DbContext(typeof(CsharpDbContext))]
    partial class CsharpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CSharpParser.model.CsharpAstNode", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Accessibility")
                        .HasColumnType("integer");

                    b.Property<int>("AstSymbolType")
                        .HasColumnType("integer");

                    b.Property<int>("AstType")
                        .HasColumnType("integer");

                    b.Property<string>("AstValue")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_end_column")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_end_line")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_start_column")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_start_line")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("RawKind")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CsharpAstNodes");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("ClassType")
                        .HasColumnType("integer");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpNamespaceId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpClasses");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEdge", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("From")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("To")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CsharpEdges");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEnum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpNamespaceId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpEnums");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEnumMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("CsharpEnumId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<int>("EqualsValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpEnumId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpEnumMembers");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEtcEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("DeclaratorNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<int>("EtcEntityType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedType")
                        .HasColumnType("text");

                    b.Property<long>("TypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpEtcEntitys");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<int>("MethodType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedType")
                        .HasColumnType("text");

                    b.Property<long>("TypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpMethods");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpNamespace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpNamespaces");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpStruct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpNamespaceId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpStructs");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AstNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentNodeId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedType")
                        .HasColumnType("text");

                    b.Property<long>("TypeHash")
                        .HasColumnType("bigint");

                    b.Property<int>("VariableType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("CsharpVariables");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpClass", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpNamespace", "CsharpNamespace")
                        .WithMany()
                        .HasForeignKey("CsharpNamespaceId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("CsharpNamespace");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEnum", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpNamespace", "CsharpNamespace")
                        .WithMany()
                        .HasForeignKey("CsharpNamespaceId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("CsharpNamespace");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEnumMember", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpEnum", null)
                        .WithMany("CsharpEnumMembers")
                        .HasForeignKey("CsharpEnumId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEtcEntity", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpMethod", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpNamespace", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpStruct", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpNamespace", "CsharpNamespace")
                        .WithMany()
                        .HasForeignKey("CsharpNamespaceId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("CsharpNamespace");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpVariable", b =>
                {
                    b.HasOne("CSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("CSharpParser.model.CsharpAstNode", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.Navigation("AstNode");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("CSharpParser.model.CsharpEnum", b =>
                {
                    b.Navigation("CsharpEnumMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
